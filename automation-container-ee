#!/usr/bin/bash

# Setup/update automation & execution environment used
# with aap/tower.
#------------------------------------------------------------

ProgName=$( basename $0 )
DirName=$( dirname $0 ); [[ $DirName == '.' ]] && DirName=$PWD

AUTOMATION_INV_FILE=".automation-environment-inventory"

# Story name for JIRA
if [[ $( basename ${DirName} ) == @(${PROJECT-:'PR'}-*) ]]
then
        STORY_NAME="$( basename ${DirName} )"
        STORY_PATH=true
fi

function f_usage
{
        if [[ -n $1 ]]
        then
                ERC=$1; shift
                [[ -n $1 ]] && echo -e "error: $*\n"
        fi

        cat <<-EOF
        Create and login to automation environment.

        usage: ${ProgName} [-D] [-E] [-1] [-c suffix] [-i inventory] [-V release] [-S storyname ][-p path] [-u url] [-d] [-A] [-a] [-r]
               ${ProgName} [-V release] [-p path] [[-R] | [-C [all|running|stopped]] | [-L]] [playbook.yml]

            -1  Select previous prelease
            -c  container suffix for creating multiple containers
            -V  select specific release
            -p  path to store release (not compatible with -1 or -V)
            -E  Expose podman socket
            -D  Enable developer mode
                Mount your /${GIT_USER:-'git'}/$USER/{GIT,git} folder
                add to your GIT/roles to ANSIBLE_ROLES_PATH
                add GIT/bin to PATH
            -i  inventory
            -u  alternative URL for automation setup playbook
            -A  do not download/update the automation (default is to download/update)
            -a  Call Azure Login
            -r  Refresh container (stop/remove and re-create)
            -P  Add container priviledged mode (--privileged=true)
            -U  Alternative container URI
            -l  Login user
            -K  Forward KRB5 Cache (${KRB5CCNAME-:'Not Used'})
            -X  Set ANSIBLE_LOG_PATH to host \$HOME/ansible-log
            -S  Story name (used in the container and to store logs etc)

            -R  Remove container and automation environment
            -C  Container cleanup
            -L  List automation containers

        example:
            # Start the previous version of the container and call azure login
            ${ProgName} -1 -a

            # Start the previous version of the container and do not update inventories
            ${ProgName} -1 -A

            Example automation-environment-dev.env
                #
                ANSIBLE_VAULT_PASSWORD_FILE=\\~/GIT/.ansible.vault
                ANSIBLE_ENABLE_TASK_DEBUGGER=False
                ANSIBLE_DISPLAY_ARGS_TO_STDOUT=True
                ANSIBLE_VERBOSITY=1
                ANSIBLE_LOCALHOST_WARNING=False
                MYVIMRC=\\~/GIT/.vimrc

                # Re-order to prevent warnings as Amadeus always use ini to date
                # ------------------------------------------------------------
                ANSIBLE_INVENTORY_ENABLED=ini,yaml,script,host_list,auto

                # Add vi keys as the default to the login shell
                CONTAINER_SHELL_OPTIONS="-o vi"
        EOF

        if [[ -s ${AUTOMATION_INV_FILE} ]]
        then
                echo "Available Inventories: (${AUTOMATION_INV_FILE})"
                grep -v "^#" ${AUTOMATION_INV_FILE} | awk '{ print "\t"$0 }'
        fi

        if [[ -n $1 ]]
        then
                exit ${ERC}
        fi
}


# Process args
#------------------------------------------------------------
while getopts :dLKPDXEp:u:l:n:U:S:i:C:aArRc:V:1 OPT
do
        case $OPT in
         1)     PREVIOUS_RELEASE=true
                ;;
         K)     if [[ -n ${KRB5CCNAME} && ${KRB5CCNAME} == @(FILE:*) ]]
                then
                        FORWARD_KRB5=true
                fi
                ;;
         P)     PRIV_TRUE="--privileged=true"
                ;;
         n)     CONTAINER_NS_ID=${OPTARG}
                ;;
         c)     CONTAINER_SUFFIX=$OPTARG
                ;;
         E)     EXPOSE_PODMAN=true
                ;;
         C)     CONTAINER_CLEANUP=${OPTARG:-'stopped'}
                ;;
         i)     AUTOMATION_INVENTORY=${OPTARG}
                ;;
         L)     CONTAINER_LIST=true
                ;;
         S)     STORY_NAME="${OPTARG}"
                ;;
         U)     CONTAINER_URI=${OPTARG}
                ;;
         V)     if [[ ${OPTARG} == @(*:*) ]]
                then
                        CONTAINER_SELECTED=true
                        AUTOMATION_RELEASE=${OPTARG%%:*}
                        CONTAINER_VERSION==${OPTARG##*:}
                else
                        AUTOMATION_RELEASE=${OPTARG}
                fi
                ;;
         p)     AUTOMATION_PATH=${OPTARG}
                ;;
         u)     AUTOMATION_URL=${OPTARG}
                ;;
         d)     DEBUG=true;
                export PS4='$LINENO | $@ | '
                set -x
                ;;
         A)     AUTOMATION_UPDATE=false
                ;;
         D)     DEV_MODE=true
                SKIP_AUTO_SETUP=true
                ;;
         [a])   AZ_LOGIN=true
                ;;
         r)     POD_REMOVE=true
                ;;
         l)     [[ -z ${OPTARG} ]] && f_usage 1

                LOGIN_USER=${OPTARG}
                EXTRA_EXEC_OPTIONS+=( "-u ${OPTARG}" )
                ;;
         X)     LOCAL_ANSIBLE_LOG=true

                if [[ -n ${STORY_NAME} && ${STORY_PATH} == true ]]
                then
                        LOCAL_ANSIBLE_LOG_PATH=$PWD
                else
                        LOCAL_ANSIBLE_LOG_PATH=${LOCAL_ANSIBLE_LOG_PATH:-"$HOME/ansible-log"}
                fi
                ;;
         R)     POD_REMOVE=true
                REMOVE_ONLY=true
                AUTOMATION_UPDATE=false
                ;;
         \?|*)  f_usage 1 "unknown flags selected"
                ;;
        esac
done

shift $(( $OPTIND-1 ))

if [[ -n $1 ]]
then
        for param in $*
        do
                if [[ ${param} != @(*.yml|*.yaml) ]]
                then
                        f_usage 0
                fi
        done
fi


RUNNING_CONTAINER_COUNT=$( \
        podman \
                ps -a \
                --format '{{.Names}}\t{{.State}}\t{{.Mounts}}' \
                --sort=created \
        | grep -c "_automation" \
        )

if [[ ${CONTAINER_LIST} != true && ${RUNNING_CONTAINER_COUNT} -gt 2 ]]
then
        echo "[W] You currently have ${RUNNING_CONTAINER_COUNT} containers."

        podman \
                ps -a \
                --format '{{.Names}}\t{{.State}}\t{{.Mounts}}' \
                --sort=created \
        | awk '/_automation/ { print "[W]\t"$0 }'

        echo ""
fi

if [[ ${CONTAINER_LIST} == true ]]
then
        podman \
                ps -a \
                --format '{{.Names}}\t{{.State}}\t{{.Mounts}}' \
                --sort=created \
        | grep "_automation"

        exit
fi

if [[ -n ${CONTAINER_CLEANUP} ]]
then
        if [[ ${CONTAINER_CLEANUP,,} ==  @(all|running|stopped) ]]
        then
                CONTAINERS=$(
                        if [[ ${CONTAINER_CLEANUP,,} != 'all' ]]
                        then
                                podman \
                                        ps -a \
                                        --format '{{.Names}}\t{{.State}}\t{{.Mounts}}' \
                                        --sort=created \
                                        --filter "status=${CONTAINER_CLEANUP,,}" \
                                | awk '/_automation/ { print $1 }'
                        else
                                podman \
                                        ps -a \
                                        --format '{{.Names}}\t{{.State}}\t{{.Mounts}}' \
                                        --sort=created \
                                | awk '/_automation/ { print $1 }'
                        fi
                        )
                for CONTAINER in ${CONTAINERS}
                do
                        echo "todo : remove: ${CONTAINER}"
                done
        else
                f_usage 3 "unknown type passed to cleanup (-C) flag."
        fi

        exit
fi

DEV_MODE=${DEV_MODE:-false}
REPO_URL=${REPO_URL:-'https://github.com/mahespth/repos'}
AZ_LOGIN="${AZ_LOGIN:-false}"
POD_REMOVE="${POD_REMOVE:-false}"
AUTOMATION_URL=${AUTOMATION_URL:-"${REPO_URL}/setup.yml"}
AUTOMATION_UPDATE=${AUTOMATION_UPDATE:-true}
AUTOMATION_VERSION=${AUTOMATION_VERISON:-"${REPO_URL}/_automation/latest-version"}
CONTAINER_MOUNTS=()
PREVIOUS_RELEASE=${PREVIOUS_RELEASE:-false}
AWX_EE_URI="quay.io/${QUAY_PROJECT}/${QUAY_PROJECT_PREFIX}-${AWX_EE_VERSION:-latest}"
CONTROL_NODE_URI="quay.io/${QUAY_PROJECT}/${QUAY_PROJECT_PREFIX}/control_node:lastet"
CONTAINER_VERSION=${CONTAINER_VERSION:-"1.0.20"}
#CONTAINER_URI=${CONTAINER_URI:-"quay.io/${QUAY_PROJECT}/${QUAY_PROJECT_PREFIX}/${QUAY_PROJECT_PREFIX}-python:$CONTAINER_VERSION"}
#EE_VERSION="latest"
EE_VERSION="${EE_VERSION:-3.0.40}"
CONTAINER_URI=${CONTAINER_URI:-"quay.io/${QUAY_PROJECT}/${QUAY_PROJECT_PREFIX}_ee:${EE_VERSION}"}

RELEASE_VERSION=$( curl -sq "${AUTOMATION_VERSION}" )
AUTOMATION_RELEASE=${AUTOMATION_RELEASE:-"${RELEASE_VERSION}"}

# ------------------------------------------------------------
if [[ ${CONTAINER_URI} == @(*_ee*) ]]
then
        CONTAINER_NS_ID=1000
fi

if [[ ! -s ~/.automation-version-latest ]]
then
        echo "${RELEASE_VERSION}" > ~/.automation-version-latest
else
        LAST_RELEASE=$( cat ~/.automation-version-latest )

        if [[ ${LAST_RELEASE} != ${RELEASE_VERSION} ]]
        then
                echo "** NOTICE ** New release is available (${RELEASE_VERSION})"

                if [[ -z ${PREVIOUS_RELEASE} && -z ${AUTOMATION_RELEASE} && ${AUTOMATION_UPDATE} == false ]]
                then
                        echo "** NOTICE ** you must specifiy the version for an existing container."
                        exit 1
                fi
        fi

        if [[ ${RELEASE_VERSION} == ${AUTOMATION_RELEASE} ]]
        then
                echo "${RELEASE_VERSION}" > ~/.automation-version-latest
        fi
fi

#AUTOMATION_PATH=${AUTOMATION_PATH:-/${GIT_HOME}/${USER}/_automation}"
AUTOMATION_PATH=${AUTOMATION_PATH:-"/${GIT_HOME}/${USER}/_automation_v${AUTOMATION_RELEASE}"}

if [[ ${PREVIOUS_RELEASE} == true ]]
then
        CURRENT_RELEASE=${AUTOMATION_RELEASE}

        _va=( ${AUTOMATION_RELEASE//./ } )
        _va[-1]=$(( _va[-1]-1 ))

        AUTOMATION_RELEASE=${_va[*]}
        AUTOMATION_RELEASE=${AUTOMATION_RELEASE// /.}

        AUTOMATION_PATH="/${GIT_HOME}/${USER}/automation_v${AUTOMATION_RELEASE}"

fi

if [[ -n ${STORY_NAME} ]]
then
        CONTAINER_NAME="${STORY_NAME//-/_}_v${AUTOMATION_RELEASE//./_}_automation"${CONTAINER_SUFFIX:+"_${CONTAINER_SUFFIX}"}
else
        CONTAINER_NAME="${USER}_v${AUTOMATION_RELEASE//./_}_automation"${CONTAINER_SUFFIX:+"_${CONTAINER_SUFFIX}"}
fi

echo "[I] release: ${AUTOMATION_RELEASE} container: ${CONTAINER_NAME} "${CURRENT_RELEASE:+" (current: ${CURRENT_RELEASE})"}

if [[ ${AUTOMATION_UPDATE} == true ]]
then
        if [[ ! -d ${AUTOMATION_PATH} ]]
        then
                echo "[I] creating: ${AUTOMATION_PATH}"
                mkdir ${AUTOMATION_PATH} || echo $?
        fi

        curl ${AUTOMATION_URL} -o ${AUTOMATION_PATH}/$( basename "${AUTOMATION_URL}" )

        echo "[I] running playbook ${AUTOMATION_PATH}/$( basename ${AUTOMATION_URL} )"

        ANSIBLE_STDOUT_CALLBACK=${ANSBILE_STDOUT_CALLBACK:-'dense'} \
        ANSIBLE_LOCALHOST_WARNING=False \
        ansible-playbook \
                -e "automation_version=${AUTOMATION_RELEASE}" \
                -e "root_folder=${AUTOMATION_PATH}" \
                -e "automation_folder=${AUTOMATION_PATH}/automation" \
                -e "inventory_folder=${AUTOMATION_PATH}/inventory" \
                ${AUTOMATION_PATH}/$( basename "${AUTOMATION_URL}" )

        if [[ -s ${AUTOMATION_PATH}/versions/.version ]]
        then
                REQUIRED_CONTAINER_VERISON=$( <${AUTOMATION_PATH}/versions/.version )
        fi

fi

if [[ ${LOCAL_ANSIBLE_LOG} == true ]]
then
        if [[ ! -d ${LOCAL_ANSIBLE_LOG_PATH} ]]
        then
                mkdir ${LOCAL_ANSIBLE_LOG_PATH}
        fi

        if [[ -h ${LOCAL_ANSIBLE_LOG_PATH} ]]
        then
                cd ${LOCAL_ANSIBLE_LOG_PATH}
                LOCAL_ANSIBLE_LOG_PATH=$PWD
                cd -
        fi

        CONTAINER_MOUNTS+=("-v ${LOCAL_ANSIBLE_LOG_PATH}:/home/ansible/ansible-log")
        EXTRA_EXEC_OPTIONS+=( -e "ANSIBLE_LOG_PATH=/home/ansible/ansible-log/ansible_log_${CONTAINER_NAME}" )
fi

# Autoselect the container version is specified
#------------------------------------------------------------
if [[ -n ${REQUIRED_CONTAINER_VERSION} ]]
then
        if [[ $CONTAINER_SELECTED == true ]]
        then
                echo "** warning ** you selected container ${CONTAINER_VERSION}, however this release should use ${REQUIRED_CONTAINER_VERSION}"
        else
                CONTAINER_VERSION=${REQUIRED_CONTAINER_VERISON}
        fi
fi

if [[ ${POD_REMOVE} == true ]]
then
        name=$( podman ps -a --filter name="${CONTAINER_NAME}\$" -q 2>/dev/null )

        if [[ -n ${name} ]]
        then
                podman stop ${CONTAINER_NAME} >/dev/null
        else
                if [[ -d ${AUTOMATION_PATH} ]]
                then
                        echo "[I] ${AUTOMATION_PATH} needs removing manually"
                fi

                if [[ ${REMOVE_ONLY} == true ]]
                then
                        echo "[I] container ${CONTAINER_NAME} has already been removed."
                        exit 0
                fi
        fi

        podman rm ${CONTAINER_NAME} >/dev/null 2>&1

        echo "[I] Removed ${CONTAINER_NAME}"
fi

if [[ ${REMOVE_ONLY} == true ]]
then
        exit $?
fi

if [[ -z ${NOPULL} ]]
then
        if [[ ${CONTAINER_URI} == @(*:*) && -z ${NOPULL} ]]
        then
                echo "[I] Pulling: ${CONTAINER_URI}"
                POD_ID=$( podman pull ${CONTAINER_URI}  -q )
        else
                echo "[I] Pulling: ${CONTAINER_URI}${CONTAINER_VERSION:+":$CONTAINER_VERSION"}"
                POD_ID=$( podman pull ${CONTAINER_URI}${CONTAINER_VERSION:+":$CONTAINER_VERSION"}  -q )
        fi

        if [[ -z ${POD_ID} ]]
        then
                exit 1
        fi
fi

name=$( podman ps -a --filter name="${CONTAINER_NAME}\$" -q )


if [[ ${FORWARD_KRB5} == true ]]
then
        KRB5CCNAME_SHORT=${KRB5CCNAME##*:}
        CONTAINER_MOUNTS+=("-v ${KRB5CCNAME_SHORT}:${KRB5CCNAME_SHORT}:Z")
        EXTRA_EXEC_OPTIONS+=( -e "KRB5CCNAME=${KRB5CCNAME}" )

        echo "[I] Forwarding KRB5 cache ${KRB5CCNAME}"
fi


if [[ ${DEV_MODE} == true ]]
then
        if [[ -d /${GIT_HOME}/${USER}/GIT ]]
        then
                GIT_LOCAL="/{GIT_HOME}/${USER}/GIT"
                GIT_MOUNT="/home/ansible/GIT"
        else
                GIT_LOCAL="/${GIT_HOME}/${USER}/git"
                GIT_MOUNT="/home/ansible/git"
        fi

        CONTAINER_MOUNTS+=("-v ${AUTOMATION_PATH}:/home/ansible/_automation:Z")

        if [[ ${AUTOMATION_UPDATE} == false ]]
        then
                EXTRA_EXEC_OPTIONS+=( -e "SKIP_AUTO_SETUP=${SKIP_AUTO_SETUP}" )
        fi

        if [[ -s ~/.automation-environment-dev.env || -s .automation-environment.env ]]
        then
                [[ -s ~/.automation-environment-dev.env ]] && \
                        echo "[I] Adding ENV vars from ~/.automation-environment.env"

                [[ -s .automation-environment-dev.env && $PWD != $HOME ]]
                        echo "[I] Adding ENV vars from .automation-environment.env"

                while read
                do
                        [[ -z ${REPLY} ]] && continue

                        if [[ ${REPLY} == @(CONTAINER_*) ]]
                        then
                                eval export ${REPLY}
                        else
                                EXTRA_EXEC_OPTIONS+=( -e "${REPLY}" )
                                echo "[I] -> ${REPLY}"
                        fi

                done < <( grep -hv ^# ~/.automation-environment-dev.env .automation-environment-dev.env 2>/dev/null | sort -u  )
        fi

        if [[ ${EXPOSE_PODMAN} == true ]]
        then
                #PODMAN_SOCKET=$(  podman info | awk '/remoteSocket:/,/^$/  { if ( $1 ~ /path/) {  print $2; exit } }' )
                echo "[I] Test podman with : curl  --unix-socket /home/ansible/podman.sock http://d/v1.24/images/json"

                PODMAN_SOCKET="${GIT_LOCAL}/podman.sock"

                if [[ ! -s ${PODMAN_SOCKET} ]]
                then
                        echo "[I] starting podman api"
                        podman system service --timeout 3600 unix://${PODMAN_SOCKET} &

                        sleep 2
                fi

                CONTAINER_MOUNTS+=("-v ${PODMAN_SOCKET}:/home/ansible/podman.sock:Z")
                VOLUME_PATH=$( podman info | awk '/volumePath/ { print $2}' )
                CONTAINER_MOUNTS+=("-v ${VOLUME_PATH}:${VOLUME_PATH}:Z")
                EXTRA_RUN_OPTIONS+=( --security-opt label=disable )
        fi

        CONTAINER_MOUNTS+=("-v ${GIT_LOCAL}:${GIT_MOUNT}:Z")
        EXTRA_EXEC_OPTIONS+=( -e "PATH=${GIT_MOUNT}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" )
        EXTRA_EXEC_OPTIONS+=( -e "ANSIBLE_ROLES_PATH=/home/ansible/_automation/automation/roles:${GIT_MOUNT}/roles" )


        if touch ${GIT_LOCAL}/.histfile_${CONTAINER_NAME}
        then
                EXTRA_EXEC_OPTIONS+=( -e "HISTFILE=${GIT_MOUNT}/.histfile_${CONTAINER_NAME}" )
        else
                echo "** WARNING ** unable to save shell history."
        fi

        AUTOMATION_INVENTORY=${AUTOMATION_INVENTORY:-''}

        if [[ -n ${AUTOMATION_INVENTORY} ]]
        then
                if [[ ${AUTOMATION_INVENTORY} != @(/*) ]]
                then
                        AUTOMATION_INVENTORY="/home/ansible/_automation/inventory/${AUTOMATION_INVENTORY}"
                fi

        elif [[ -s ${AUTOMATION_INV_FILE} ]]
        then
                if (( $( grep -vc "^#" ${AUTOMATION_INV_FILE} ) > 1 ))
                then
                        echo -e "\n[I] Inventory Selection required:\n"
                        PS3='[P] Select Inventory : '

                        select AUTOMATION_INVENTORY in $( cat ${AUTOMATION_INV_FILE} )
                        do
                                break
                        done
                else
                        AUTOMATION_INVENTORY="$( < ${AUTOMATION_INV_FILE} )"
                fi

                if [[ ${AUTOMATION_INVENTORY} != @(/*) ]]
                then
                        AUTOMATION_INVENTORY="/home/ansible/_automation/inventory/${AUTOMATION_INVENTORY}"
                fi
        fi

        if [[ -n ${AUTOMATION_INVENTORY} ]]
        then
                EXTRA_EXEC_OPTIONS+=( -e "ANSIBLE_INVENTORY=${AUTOMATION_INVENTORY}" )
        fi
else
        if [[ -s ~/.automation-environment.env || -s .automation-environment.env ]]
        then
                [[ -s ~/.automation-environment.env ]] && \
                        echo "[I] Adding ENV vars from ~/.automation-environment.env"

                [[ -s .automation-environment.env && $PWD != $HOME ]]
                        echo "[I] Adding ENV vars from .automation-environment.env"

                while read
                do
                        [[ -z ${REPLY} ]] && continue

                        if [[ ${REPLY} == @(CONTAINER_*) ]]
                        then
                                eval export ${REPLY}
                        else
                                EXTRA_EXEC_OPTIONS+=( -e "${REPLY}" )
                                echo "[I] -> ${REPLY}"
                        fi

                done < <( grep -hv ^# ~/.automation-environment.env .automation-environment.env 2>/dev/null )
        fi
fi

if [[ -z ${name} ]]
then
        CONTAINER_ID=$(
                podman run \
                        --init \
                        -d \
                        -t \
                        ${EXTRA_RUN_OPTIONS[*]} \
                        --userns=keep-id:uid=${CONTAINER_NS_ID:-'100'},gid=10 \
                        --name ${CONTAINER_NAME} \
                        ${CONTAINER_MOUNTS[*]} ${PRIV_TRUE} \
                        "${POD_ID}"
                )
        echo "[I] started container ${CONTAINER_ID}"
else
        name=$( podman ps --filter name="${CONTAINER_NAME}\$" -q )

        if [[ -z ${name}  ]]
        then
                CONTAINER_ID=$( podman start ${CONTAINER_NAME} )
                echo "[I] started existing container ${CONTAINER_ID}"
        fi
fi

if [[ -n $1 ]]
then
        BASH_SHELL_EXEC="-c 'ansible-playbook $@'"
fi

if [[ -n $1 ]]
then
        BASH_SHELL_EXEC="-c 'ansible-playbook $@'"
fi

eval podman exec \
        -it \
        ${EXTRA_EXEC_OPTIONS[*]} \
        -e "AZ_LOGIN=${AZ_LOGIN}" \
        "${CONTAINER_NAME}" \
        bash ${CONTAINER_SHELL_OPTIONS} ${BASH_SHELL_EXEC}

exit $?
