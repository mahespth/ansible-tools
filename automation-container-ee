#!/usr/bin/bash



echo "[I] release: ${AUTOMATION_RELEASE} container: ${CONTAINER_NAME} "${CURRENT_RELEASE:+" (current: ${CURRENT_RELEASE})"}

if [[ ${AUTOMATION_UPDATE} == true ]]
then
        if [[ ! -d ${AUTOMATION_PATH} ]]
        then
                echo "[I] creating: ${AUTOMATION_PATH}"
                mkdir ${AUTOMATION_PATH} || echo $?
        fi

        curl ${AUTOMATION_URL} -o ${AUTOMATION_PATH}/$( basename "${AUTOMATION_URL}" )

        echo "[I] running playbook ${AUTOMATION_PATH}/$( basename ${AUTOMATION_URL} )"

        ANSIBLE_STDOUT_CALLBACK=${ANSBILE_STDOUT_CALLBACK:-'dense'} \
        ANSIBLE_LOCALHOST_WARNING=False \
        ansible-playbook \
                -e "automation_version=${AUTOMATION_RELEASE}" \
                -e "root_folder=${AUTOMATION_PATH}" \
                -e "automation_folder=${AUTOMATION_PATH}/automation" \
                -e "inventory_folder=${AUTOMATION_PATH}/inventory" \
                ${AUTOMATION_PATH}/$( basename "${AUTOMATION_URL}" )

        if [[ -s ${AUTOMATION_PATH}/versions/.version ]]
        then
                REQUIRED_CONTAINER_VERISON=$( <${AUTOMATION_PATH}/versions/.version )
        fi

fi

if [[ ${LOCAL_ANSIBLE_LOG} == true ]]
then
        if [[ ! -d ${LOCAL_ANSIBLE_LOG_PATH} ]]
        then
                mkdir ${LOCAL_ANSIBLE_LOG_PATH}
        fi

        if [[ -h ${LOCAL_ANSIBLE_LOG_PATH} ]]
        then
                cd ${LOCAL_ANSIBLE_LOG_PATH}
                LOCAL_ANSIBLE_LOG_PATH=$PWD
                cd -
        fi

        CONTAINER_MOUNTS+=("-v ${LOCAL_ANSIBLE_LOG_PATH}:/home/ansible/ansible-log")
        EXTRA_EXEC_OPTIONS+=( -e "ANSIBLE_LOG_PATH=/home/ansible/ansible-log/ansible_log_${CONTAINER_NAME}" )
fi

# Autoselect the container version is specified
#------------------------------------------------------------
if [[ -n ${REQUIRED_CONTAINER_VERSION} ]]
then
        if [[ $CONTAINER_SELECTED == true ]]
        then
                echo "** warning ** you selected container ${CONTAINER_VERSION}, however this release should use ${REQUIRED_CONTAINER_VERSION}"
        else
                CONTAINER_VERSION=${REQUIRED_CONTAINER_VERISON}
        fi
fi

if [[ ${POD_REMOVE} == true ]]
then
        name=$( podman ps -a --filter name="${CONTAINER_NAME}\$" -q 2>/dev/null )

        if [[ -n ${name} ]]
        then
                podman stop ${CONTAINER_NAME} >/dev/null
        else
                if [[ -d ${AUTOMATION_PATH} ]]
                then
                        echo "[I] ${AUTOMATION_PATH} needs removing manually"
                fi

                if [[ ${REMOVE_ONLY} == true ]]
                then
                        echo "[I] container ${CONTAINER_NAME} has already been removed."
                        exit 0
                fi
        fi

        podman rm ${CONTAINER_NAME} >/dev/null 2>&1

        echo "[I] Removed ${CONTAINER_NAME}"
fi

if [[ ${REMOVE_ONLY} == true ]]
then
        exit $?
fi

if [[ -z ${NOPULL} ]]
then
        if [[ ${CONTAINER_URI} == @(*:*) && -z ${NOPULL} ]]
        then
                echo "[I] Pulling: ${CONTAINER_URI}"
                POD_ID=$( podman pull ${CONTAINER_URI}  -q )
        else
                echo "[I] Pulling: ${CONTAINER_URI}${CONTAINER_VERSION:+":$CONTAINER_VERSION"}"
                POD_ID=$( podman pull ${CONTAINER_URI}${CONTAINER_VERSION:+":$CONTAINER_VERSION"}  -q )
        fi

        if [[ -z ${POD_ID} ]]
        then
                exit 1
        fi
fi

name=$( podman ps -a --filter name="${CONTAINER_NAME}\$" -q )


if [[ ${FORWARD_KRB5} == true ]]
then
        KRB5CCNAME_SHORT=${KRB5CCNAME##*:}
        CONTAINER_MOUNTS+=("-v ${KRB5CCNAME_SHORT}:${KRB5CCNAME_SHORT}:Z")
        EXTRA_EXEC_OPTIONS+=( -e "KRB5CCNAME=${KRB5CCNAME}" )

        echo "[I] Forwarding KRB5 cache ${KRB5CCNAME}"
fi


if [[ ${DEV_MODE} == true ]]
then
        if [[ -d /${GIT_HOME}/${USER}/GIT ]]
        then
                GIT_LOCAL="/{GIT_HOME}/${USER}/GIT"
                GIT_MOUNT="/home/ansible/GIT"
        else
                GIT_LOCAL="/${GIT_HOME}/${USER}/git"
                GIT_MOUNT="/home/ansible/git"
        fi

        CONTAINER_MOUNTS+=("-v ${AUTOMATION_PATH}:/home/ansible/_automation:Z")

        if [[ ${AUTOMATION_UPDATE} == false ]]
        then
                EXTRA_EXEC_OPTIONS+=( -e "SKIP_AUTO_SETUP=${SKIP_AUTO_SETUP}" )
        fi

        if [[ -s ~/.automation-environment-dev.env || -s .automation-environment.env ]]
        then
                [[ -s ~/.automation-environment-dev.env ]] && \
                        echo "[I] Adding ENV vars from ~/.automation-environment.env"

                [[ -s .automation-environment-dev.env && $PWD != $HOME ]]
                        echo "[I] Adding ENV vars from .automation-environment.env"

                while read
                do
                        [[ -z ${REPLY} ]] && continue

                        if [[ ${REPLY} == @(CONTAINER_*) ]]
                        then
                                eval export ${REPLY}
                        else
                                EXTRA_EXEC_OPTIONS+=( -e "${REPLY}" )
                                echo "[I] -> ${REPLY}"
                        fi

                done < <( grep -hv ^# ~/.automation-environment-dev.env .automation-environment-dev.env 2>/dev/null | sort -u  )
        fi

        if [[ ${EXPOSE_PODMAN} == true ]]
        then
                #PODMAN_SOCKET=$(  podman info | awk '/remoteSocket:/,/^$/  { if ( $1 ~ /path/) {  print $2; exit } }' )
                echo "[I] Test podman with : curl  --unix-socket /home/ansible/podman.sock http://d/v1.24/images/json"

                PODMAN_SOCKET="${GIT_LOCAL}/podman.sock"

                if [[ ! -s ${PODMAN_SOCKET} ]]
                then
                        echo "[I] starting podman api"
                        podman system service --timeout 3600 unix://${PODMAN_SOCKET} &

                        sleep 2
                fi

                CONTAINER_MOUNTS+=("-v ${PODMAN_SOCKET}:/home/ansible/podman.sock:Z")
                VOLUME_PATH=$( podman info | awk '/volumePath/ { print $2}' )
                CONTAINER_MOUNTS+=("-v ${VOLUME_PATH}:${VOLUME_PATH}:Z")
                EXTRA_RUN_OPTIONS+=( --security-opt label=disable )
        fi

        CONTAINER_MOUNTS+=("-v ${GIT_LOCAL}:${GIT_MOUNT}:Z")
        EXTRA_EXEC_OPTIONS+=( -e "PATH=${GIT_MOUNT}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" )
        EXTRA_EXEC_OPTIONS+=( -e "ANSIBLE_ROLES_PATH=/home/ansible/_automation/automation/roles:${GIT_MOUNT}/roles" )


        if touch ${GIT_LOCAL}/.histfile_${CONTAINER_NAME}
        then
                EXTRA_EXEC_OPTIONS+=( -e "HISTFILE=${GIT_MOUNT}/.histfile_${CONTAINER_NAME}" )
        else
                echo "** WARNING ** unable to save shell history."
        fi

        AUTOMATION_INVENTORY=${AUTOMATION_INVENTORY:-''}

        if [[ -n ${AUTOMATION_INVENTORY} ]]
        then
                if [[ ${AUTOMATION_INVENTORY} != @(/*) ]]
                then
                        AUTOMATION_INVENTORY="/home/ansible/_automation/inventory/${AUTOMATION_INVENTORY}"
                fi

        elif [[ -s ${AUTOMATION_INV_FILE} ]]
        then
                if (( $( grep -vc "^#" ${AUTOMATION_INV_FILE} ) > 1 ))
                then
                        echo -e "\n[I] Inventory Selection required:\n"
                        PS3='[P] Select Inventory : '

                        select AUTOMATION_INVENTORY in $( cat ${AUTOMATION_INV_FILE} )
                        do
                                break
                        done
                else
                        AUTOMATION_INVENTORY="$( < ${AUTOMATION_INV_FILE} )"
                fi

                if [[ ${AUTOMATION_INVENTORY} != @(/*) ]]
                then
                        AUTOMATION_INVENTORY="/home/ansible/_automation/inventory/${AUTOMATION_INVENTORY}"
                fi
        fi

        if [[ -n ${AUTOMATION_INVENTORY} ]]
        then
                EXTRA_EXEC_OPTIONS+=( -e "ANSIBLE_INVENTORY=${AUTOMATION_INVENTORY}" )
        fi
else
        if [[ -s ~/.automation-environment.env || -s .automation-environment.env ]]
        then
                [[ -s ~/.automation-environment.env ]] && \
                        echo "[I] Adding ENV vars from ~/.automation-environment.env"

                [[ -s .automation-environment.env && $PWD != $HOME ]]
                        echo "[I] Adding ENV vars from .automation-environment.env"

                while read
                do
                        [[ -z ${REPLY} ]] && continue

                        if [[ ${REPLY} == @(CONTAINER_*) ]]
                        then
                                eval export ${REPLY}
                        else
                                EXTRA_EXEC_OPTIONS+=( -e "${REPLY}" )
                                echo "[I] -> ${REPLY}"
                        fi

                done < <( grep -hv ^# ~/.automation-environment.env .automation-environment.env 2>/dev/null )
        fi
fi

if [[ -z ${name} ]]
then
        CONTAINER_ID=$(
                podman run \
                        --init \
                        -d \
                        -t \
                        ${EXTRA_RUN_OPTIONS[*]} \
                        --userns=keep-id:uid=${CONTAINER_NS_ID:-'100'},gid=10 \
                        --name ${CONTAINER_NAME} \
                        ${CONTAINER_MOUNTS[*]} ${PRIV_TRUE} \
                        "${POD_ID}"
                )
        echo "[I] started container ${CONTAINER_ID}"
else
        name=$( podman ps --filter name="${CONTAINER_NAME}\$" -q )

        if [[ -z ${name}  ]]
        then
                CONTAINER_ID=$( podman start ${CONTAINER_NAME} )
                echo "[I] started existing container ${CONTAINER_ID}"
        fi
fi

if [[ -n $1 ]]
then
        BASH_SHELL_EXEC="-c 'ansible-playbook $@'"
fi

if [[ -n $1 ]]
then
        BASH_SHELL_EXEC="-c 'ansible-playbook $@'"
fi

eval podman exec \
        -it \
        ${EXTRA_EXEC_OPTIONS[*]} \
        -e "AZ_LOGIN=${AZ_LOGIN}" \
        "${CONTAINER_NAME}" \
        bash ${CONTAINER_SHELL_OPTIONS} ${BASH_SHELL_EXEC}

exit $?
