---
- name: Install prerequisites for AAP 2.5, EDA, Platform Gateway on RHEL 9 (VMware ESXi)
  hosts: localhost
  become: true
  vars:
    min_cpu_cores: 4
    min_memory_gb: 16
    min_root_space_gb: 50
    min_pulp_space_gb: 100
    min_log_space_gb: 20
    min_swap_space_gb: 4

    aap_packages:
      - python3
      - python3-pip
      - python3-ansible-runner
      - python3-eventlet
      - python3-redis
      - python3-requests
      - python3-setuptools
      - python3-ansible-eda
      - gcc
      - libffi-devel
      - openssl-devel
      - make
      - git
      - curl
      - jq
      - firewalld
      - policycoreutils-python-utils
      - rsync
      - sshpass
      - tar
      - unzip
      - wget
      - iptables-services
      - ansible-core
      - ansible-automation-platform-installer
      - redis
      - nginx
      - open-vm-tools

    firewall_ports:
      - { port: 443, protocol: tcp }
      - { port: 5000, protocol: tcp }
      - { port: 6379, protocol: tcp }
      - { port: 5432, protocol: tcp }
      - { port: 80, protocol: tcp }
      - { port: 8052, protocol: tcp }
      - { port: 8053, protocol: tcp }
      - { port: 8080, protocol: tcp }
      - { port: 8443, protocol: tcp }

  tasks:

  # Red Hat Subscription and Repository Setup
  - name: Check if the system is already registered with Red Hat
    command: subscription-manager status
    register: subscription_status
    changed_when: false
    failed_when: subscription_status.rc != 0

  - name: Register the system with Red Hat Subscription Manager
    command: subscription-manager register --auto-attach
    when: "subscription_status.rc != 0"
    register: register_output
    ignore_errors: yes

  - name: Display registration output
    debug:
      msg: "{{ register_output.stdout }}"
    when: register_output is defined

  - name: Enable required Red Hat repositories
    block:
      - name: Enable AAP repository
        command: subscription-manager repos --enable=ansible-automation-platform-2.5-for-rhel-9-x86_64-rpms
        register: aap_repo_output
        changed_when: "'enabled' in aap_repo_output.stdout"
        ignore_errors: yes

      - name: Enable EDA repository
        command: subscription-manager repos --enable=ansible-eda-2.5-for-rhel-9-x86_64-rpms
        register: eda_repo_output
        changed_when: "'enabled' in eda_repo_output.stdout"
        ignore_errors: yes

      - name: Display repository enablement output
        debug:
          msg: "AAP Repository: {{ aap_repo_output.stdout }}, EDA Repository: {{ eda_repo_output.stdout }}"

  # Check CPU cores
  - name: Check if the system has the minimum required CPU cores
    command: nproc
    register: cpu_cores
  - name: Validate CPU cores
    assert:
      that: "cpu_cores.stdout|int >= min_cpu_cores"
      fail_msg: "System does not have the required {{ min_cpu_cores }} CPU cores."

  # Check system memory
  - name: Check if the system has the minimum required memory
    command: free -g | grep Mem | awk '{print $2}'
    register: memory_gb
  - name: Validate memory
    assert:
      that: "memory_gb.stdout|int >= min_memory_gb"
      fail_msg: "System does not have the required {{ min_memory_gb }} GB of RAM."

  # Check available disk space on root
  - name: Check available disk space on root (/)
    command: df -BG --output=avail / | tail -1 | sed 's/G//'
    register: root_space
  - name: Validate root partition space
    assert:
      that: "root_space.stdout|int >= min_root_space_gb"
      fail_msg: "Insufficient disk space on root (/). Minimum {{ min_root_space_gb }} GB required."

  # Check available disk space on /var/lib/pulp
  - name: Check available disk space on /var/lib/pulp
    command: df -BG --output=avail /var/lib/pulp | tail -1 | sed 's/G//'
    register: pulp_space
    ignore_errors: yes
  - name: Validate /var/lib/pulp space
    assert:
      that: "pulp_space.stdout|int >= min_pulp_space_gb"
      fail_msg: "Insufficient disk space on /var/lib/pulp. Minimum {{ min_pulp_space_gb }} GB required."
    when: pulp_space is defined and pulp_space.stdout != ""

  # Install required packages
  - name: Install required packages
    dnf:
      name: "{{ aap_packages }}"
      state: present
      update_cache: true

  # Configure firewall
  - name: Open required firewall ports
    firewalld:
      port: "{{ item.port }}/{{ item.protocol }}"
      permanent: true
      state: enabled
    with_items: "{{ firewall_ports }}"
  - name: Reload firewalld to apply changes
    command: firewall-cmd --reload

  # Install and enable VMware Tools
  - name: Start and enable VMware Tools
    systemd:
      name: vmtoolsd
      state: started
      enabled: true

  # Create swap file if needed
  - name: Create swap file (if not present)
    command: |
      fallocate -l 4G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile
    args:
      creates: /swapfile
  - name: Ensure swap entry in /etc/fstab
    lineinfile:
      path: /etc/fstab
      line: "/swapfile swap swap defaults 0 0"
      state: present

  - name: Display success message
    debug:
      msg: "All checks passed, system registered, repositories enabled, and prerequisites installed successfully."
